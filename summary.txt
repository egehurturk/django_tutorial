Summary of Lecture 1 (Setup):
    - Basic setup:
        - To create django project, run `django-admin startproject <name>`
        - To run your script, run `python manage.py runserver`



Summary of Lecture 2 (Apps & Urls):
    - Apps:
        - Django project includes apps (components). 
        - To create app, run `python manage.py startapp <name>`
        - Add a new `urls.py` file in your app
    
    - Views:
        - We've created a few views and returned `HttpResponse` (not convenient)
    
    - Urls:
        - We've registered the blog application's url's in the main `urls.py` file. 
            - Note: when we open e.g. '/blog/posts', the `include()` function strips off the blog part,
                    then sends the 'posts/' url to the url handler of blog app. 
        - We've created a new `urls.py` file and added a few paths.
            - By convention, use '<name>-home' to prevent collision



Summary of Lecture 3 (Templates):
    - Template Rendering:
        - We can render templates with the `render(request, <template_name>, vars)` function.
        - We've created a dummy post and passed that to HTML file.
    
    - Template operations:
        - We learned how to use the  % for i in posts % expression and the % if % statement/
        - We learned that we can use variables with the double curly brackets notation.
        - We accessed the dictionary attributes with the following notation:
            - posts.title
    
    - Template Inheritance:
        - We learned how to create a base template and inherit that template on other pages.
            - With the extends keyword and creating block content blocks in the base template

    - Static Files:
        - Load static:
            - We should first create a directory in our app called static.
                - then inside, a new blog directory
                    - Then inside, our static files (css, js, img)
            
            - To load static files (css, js, img), we should use the 'load static' code block
              at the first line of the base template.

            - Then, use the '% static 'blog/main.css' %' when we want to use static.
 
    - URLs:
        - Use URLs in template:
            - To uss URLs in a template, use the '% url "blog-post" %' code block
                - the "blog-post" name is the URL name that we defined in the `urls.py` file.
                - It is convenient to use name so that when we change the url, we won't need to
                  change in our templates. 



Summary of Lecture 4 (Admin):
    - Admin Page:
        - We've made migrations (database stuff):
            - First, we've used the `python manage.py makemigrations` command
            - Then, we've used the `python manage.py migrate` command.
        
        - Superuser:
            - We created a superuser (which has access to all things) using the following command:
                - `python manage.py createsuperuser`

        - Admin Interface:
            - We've explored the Django admin interface, added a user from admin page.


Summary of Lecture 5 (Database):
    - Creating a Database Object:
        - Django's ORM works as follows: We need to define a class that holds the database table object:
            - We've created a Post class which has the title, content, author, and date_posted fields.
                - We've used the models.<name>Field function and passsed it some values.
            
            - models.TextField is similar to models.CharField, but it is unrestricted. 
            - You can never update the `auto_now_add=True` datetime field, so we've used the
                - `date_posted = models.DateTimeField(default=timezone.now)` and imported the 
                   `from django.utils import timezone`.
                
                - We've created a ForeignKey to our User object that we've imported from the 
                  `from django.contrib.auth.models import User`.
                    - `author = models.ForeignKey(User, on_delete=models.CASCADE)`
                        - `models.CASCADE` means that if the user is deleted, delete its all posts.

    
    - SQL:
        - To see the exact SQL Migration code, run:
            - `python manage.py sqlmigrate blog 0001`
        
    
    - ORM:
        - ORM helps us to write SQL code without even writing it.
        - Migrations are useful because it allows to make changes to our database without even writing SQL update code.

        - Django shell: `python manage.py shell`

        - ORM Queries:
            - `User.objects.all()` returns all the users
            - `User.objects.first()/.last()` returns first/last users
            - `User.objects.filter(username='EgeH')` returns the specified filter
            - `user = User.objects.filter(username='EgeH').first()` returns 'EgeH'.
            - We can access User attributes:
                - `user.id`
                - `user.pk ` (Primary Key)
            
            - `User.objects.get(id=1)` queries the User with ID 1.
            - `Post(title='First Post', content='First Blog Post content', author=user)` will create a new Post.
            -  When we create a post object, we should save to database using `post_1.save()`
            - To Create a nice representation of our Object, we should define a `__str__()` method.
            - We can access the ForeignKey Classes's fields with the associated class:
                - `post.author.email` -> 'ege@hurturk.com'
            
            - We've deleted the dummy data, and instead queired the posts from our database.
        
    - Filters:
        - We've applied filters in our home template page.
            - {{ date_posted|date:"F d, Y" }}
    
    - Admin GUI:
        - We've registered our Post model
            - `admin.site.register(Post)`
    

Summart of Lecture 6 (User Registration):
    - Create a new users app for User Registration / Authorization
        - `python manage.py startapp users`
             - Add the new app to the INSTALLED APPS section on settings.py 
                - 'users.apps.UserConfig'

    - UserCreationForm:
        - Django already has predefined forms that will save you from writing a user registration form from
          scratch. It is located in `from django.contrib.auth.forms import UserCreationForm`.
        - UserCreationForm will be very useful as it contains crucial logic for registration 
    
        - We can pass our form variable `form = UserCreationForm()` to our 'register.html' page.
            - Show form with {{ form }} block.
            - we need to specify <form method='POST'></form>.
            - CSRF Token is a necessary token that is required to be secure.
                - {% csrf_token %}
            
            - {{ form.as_p }} will render form as paragraph.
            - save the form with `form.save()` method.


    - Requests:
        - Hence we defined the method to POST, we should handle the POST request in our views.py file.
        - the request variable that we've passed in our view function has a method:
            |- `request.method` will contain the method that we send to the page.
            |- We will use `if request.method == 'POST'` to specify that if the request is POST, do something
            |- Then, in the if block, we will instanciate the form UserCreationForm with our request.POST item.
                |- Else, we will instanciate a new blank UserCreationForm.

            |- The, inside the if statement, we will add another if statement `if form.is_valid()`
                |- the `is_valid()` function checks the form and returns True for valid form.

            |- Then, we will get the username from the POST request with:
                |- `username = form.cleaned_data.get('username)`
                    |- the `.cleaned_data` is the cleaned information about our request.

            - 
 
    - Flash Messages:
        - Django has a nice flash messages that are for one request i.e when we reload, they will disappear.
            - First, we need to import them:
                - `from django.contrib import messages`

            - messages has various types: messages.debug, messages.success, messages.info, messages.error
            - messages.success will get the first argument as request, then the string we want to display.
            - We want to display messages in base.html using {% if messages %}
            - {{ message.tags }} will contain the tag of your message.

    - Redirect:
        - Django has a shortcut called 'redirect':
            - Import: `from django.shortcuts import redirect`.
                - Usage: return redirect('blog-home')

    - Forms:
        - When we display our form variable, it does not display such as an email field. 
          If we want to add a new field, create a new file called `forms.py`.

            - Our new form will inherit from UserCreationForm:
                - `class UserRegistrationForm(UserCreationForm):`
                - In this class, we will add a new email field, do that with `email = forms.EmailField()`
                    - By default, it will have required=True, but we can make it false.

                - We need to define a meta class inside our form class:
                    - `class UserRegistrationForm(UserCreationForm):
                            email = forms.EmailField(required=True)

                            class Meta:
                                model = User
                                fields = ['username', 'email', 'password1', 'password2']`

                    -  inside our Meta class, we will define our `model=User` by importing `from django.contrib.auth.models import User`
                    - The model that will affected is the User model, e.g when we save the form, it will save the User.
                    - We need to specify fields and pass the ordered list of fields (password1 for first password, password2 for confirmation).

    
    - Design of Form:
        - crispy_forms:
            - Install crispy forms.
                - add the 'crispy_forms' to the INSTALLED_APPS in settings.py
            
            - Config crispy-forms:
                - In settings.py, add the following script:
                    ` CRISPY_TEMPLATE_PACK='bootstrap4'
                    You can change this, look for docs.
            
            - Using as a tag:
                - In 'register.html', first add the following code block: {% load crispy_form_tags %}
                - Then, use the filter: {{ form|crispy }}