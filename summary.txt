Summary of Lecture 1 (Setup):
    - Basic setup:
        - To create django project, run `django-admin startproject <name>`
        - To run your script, run `python manage.py runserver`



Summary of Lecture 2 (Apps & Urls):
    - Apps:
        - Django project includes apps (components). 
        - To create app, run `python manage.py startapp <name>`
        - Add a new `urls.py` file in your app
    
    - Views:
        - We've created a few views and returned `HttpResponse` (not convenient)
    
    - Urls:
        - We've registered the blog application's url's in the main `urls.py` file. 
            - Note: when we open e.g. '/blog/posts', the `include()` function strips off the blog part,
                    then sends the 'posts/' url to the url handler of blog app. 
        - We've created a new `urls.py` file and added a few paths.
            - By convention, use '<name>-home' to prevent collision



Summary of Lecture 3 (Templates):
    - Template Rendering:
        - We can render templates with the `render(request, <template_name>, vars)` function.
        - We've created a dummy post and passed that to HTML file.
    
    - Template operations:
        - We learned how to use the  % for i in posts % expression and the % if % statement/
        - We learned that we can use variables with the double curly brackets notation.
        - We accessed the dictionary attributes with the following notation:
            - posts.title
    
    - Template Inheritance:
        - We learned how to create a base template and inherit that template on other pages.
            - With the extends keyword and creating block content blocks in the base template

    - Static Files:
        - Load static:
            - We should first create a directory in our app called static.
                - then inside, a new blog directory
                    - Then inside, our static files (css, js, img)
            
            - To load static files (css, js, img), we should use the 'load static' code block
              at the first line of the base template.

            - Then, use the '% static 'blog/main.css' %' when we want to use static.
 
    - URLs:
        - Use URLs in template:
            - To uss URLs in a template, use the '% url "blog-post" %' code block
                - the "blog-post" name is the URL name that we defined in the `urls.py` file.
                - It is convenient to use name so that when we change the url, we won't need to
                  change in our templates. 



Summary of Lecture 4 (Admin):
    - Admin Page:
        - We've made migrations (database stuff):
            - First, we've used the `python manage.py makemigrations` command
            - Then, we've used the `python manage.py migrate` command.
        
        - Superuser:
            - We created a superuser (which has access to all things) using the following command:
                - `python manage.py createsuperuser`

        - Admin Interface:
            - We've explored the Django admin interface, added a user from admin page.


Summary of Lecture 5 (Database):
    - Creating a Database Object:
        - Django's ORM works as follows: We need to define a class that holds the database table object:
            - We've created a Post class which has the title, content, author, and date_posted fields.
                - We've used the models.<name>Field function and passsed it some values.
            
            - models.TextField is similar to models.CharField, but it is unrestricted. 
            - You can never update the `auto_now_add=True` datetime field, so we've used the
                - `date_posted = models.DateTimeField(default=timezone.now)` and imported the 
                   `from django.utils import timezone`.
                
                - We've created a ForeignKey to our User object that we've imported from the 
                  `from django.contrib.auth.models import User`.
                    - `author = models.ForeignKey(User, on_delete=models.CASCADE)`
                        - `models.CASCADE` means that if the user is deleted, delete its all posts.

    
    - SQL:
        - To see the exact SQL Migration code, run:
            - `python manage.py sqlmigrate blog 0001`
        
    
    - ORM:
        - ORM helps us to write SQL code without even writing it.
        - Migrations are useful because it allows to make changes to our database without even writing SQL update code.

        - Django shell: `python manage.py shell`

        - ORM Queries:
            - `User.objects.all()` returns all the users
            - `User.objects.first()/.last()` returns first/last users
            - `User.objects.filter(username='EgeH')` returns the specified filter
            - `user = User.objects.filter(username='EgeH').first()` returns 'EgeH'.
            - We can access User attributes:
                - `user.id`
                - `user.pk ` (Primary Key)
            
            - `User.objects.get(id=1)` queries the User with ID 1.
            - `Post(title='First Post', content='First Blog Post content', author=user)` will create a new Post.
            -  When we create a post object, we should save to database using `post_1.save()`
            - To Create a nice representation of our Object, we should define a `__str__()` method.
            - We can access the ForeignKey Classes's fields with the associated class:
                - `post.author.email` -> 'ege@hurturk.com'
            
            - We've deleted the dummy data, and instead queired the posts from our database.
        
    - Filters:
        - We've applied filters in our home template page.
            - {{ date_posted|date:"F d, Y" }}
    
    - Admin GUI:
        - We've registered our Post model
            - `admin.site.register(Post)`
    

Summart of Lecture 6 (User Registration):
    - Create a new users app for User Registration / Authorization
        - `python manage.py startapp users`
             - Add the new app to the INSTALLED APPS section on settings.py 
                - 'users.apps.UserConfig'

    - UserCreationForm:
        - Django already has predefined forms that will save you from writing a user registration form from
          scratch. It is located in `from django.contrib.auth.forms import UserCreationForm`.
        - UserCreationForm will be very useful as it contains crucial logic for registration 
    
        - We can pass our form variable `form = UserCreationForm()` to our 'register.html' page.
            - Show form with {{ form }} block.
            - we need to specify <form method='POST'></form>.
            - CSRF Token is a necessary token that is required to be secure.
                - {% csrf_token %}
            
            - {{ form.as_p }} will render form as paragraph.
            - save the form with `form.save()` method.


    - Requests:
        - Hence we defined the method to POST, we should handle the POST request in our views.py file.
        - the request variable that we've passed in our view function has a method:
            |- `request.method` will contain the method that we send to the page.
            |- We will use `if request.method == 'POST'` to specify that if the request is POST, do something
            |- Then, in the if block, we will instanciate the form UserCreationForm with our request.POST item.
                |- Else, we will instanciate a new blank UserCreationForm.

            |- The, inside the if statement, we will add another if statement `if form.is_valid()`
                |- the `is_valid()` function checks the form and returns True for valid form.

            |- Then, we will get the username from the POST request with:
                |- `username = form.cleaned_data.get('username)`
                    |- the `.cleaned_data` is the cleaned information about our request.

            - 
 
    - Flash Messages:
        - Django has a nice flash messages that are for one request i.e when we reload, they will disappear.
            - First, we need to import them:
                - `from django.contrib import messages`

            - messages has various types: messages.debug, messages.success, messages.info, messages.error
            - messages.success will get the first argument as request, then the string we want to display.
            - We want to display messages in base.html using {% if messages %}
            - {{ message.tags }} will contain the tag of your message.

    - Redirect:
        - Django has a shortcut called 'redirect':
            - Import: `from django.shortcuts import redirect`.
                - Usage: return redirect('blog-home')

    - Forms:
        - When we display our form variable, it does not display such as an email field. 
          If we want to add a new field, create a new file called `forms.py`.

            - Our new form will inherit from UserCreationForm:
                - `class UserRegistrationForm(UserCreationForm):`
                - In this class, we will add a new email field, do that with `email = forms.EmailField()`
                    - By default, it will have required=True, but we can make it false.

                - We need to define a meta class inside our form class:
                    - `class UserRegistrationForm(UserCreationForm):
                            email = forms.EmailField(required=True)

                            class Meta:
                                model = User
                                fields = ['username', 'email', 'password1', 'password2']`

                    -  inside our Meta class, we will define our `model=User` by importing `from django.contrib.auth.models import User`
                    - The model that will affected is the User model, e.g when we save the form, it will save the User.
                    - We need to specify fields and pass the ordered list of fields (password1 for first password, password2 for confirmation).

    
    - Design of Form:
        - crispy_forms:
            - Install crispy forms.
                - add the 'crispy_forms' to the INSTALLED_APPS in settings.py
            
            - Config crispy-forms:
                - In settings.py, add the following script:
                    ` CRISPY_TEMPLATE_PACK='bootstrap4'
                    You can change this, look for docs.
            
            - Using as a tag:
                - In 'register.html', first add the following code block: {% load crispy_form_tags %}
                - Then, use the filter: {{ form|crispy }}



Summary of Lecture 7 (User Login/Logout):
    - Creating Login/logout URL:
        - In urls.py, import:
        `from django.contrib.auth import views as auth_views`. We should import as `auth_views` to prevent collision

        - Then, create a path:
            `path('login/', auth_views.LoginView.as_view(), name='login'),`
            `path('logout/', auth_views.LogoutView.as_view(), name='login'),`
            
            - This will not handle the template, we should create the templates:
                - To render templates, we should pass the `template_name` field in `.as_view()`:
                    - path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'),`
                    - path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html'), name='login'),`
                
                - Then, we should create the templates.
                    - Just copy paste from register.html and change things.
                
    - Redirection:
        - When we have our form ready, if we enter our username/password correcty, the form will redirect us to:
          'accounts/profile' page which does not exists.
        
        - We want to redirect to the home page.

        - To solve:
            -  Add this to settings.py:
                - `LOGIN_REDIRECT_URL='blog-home'`. This will redirect us to home page.
    
    - Log in:
        - Everything should be same

    - Log out:
        - Create a logout page.

    - Changing the Navbar (for Login/Logout):
        - Django has a user object that contains information about the current user
            - We can use the {% if user.is_authenticated %} to display the login and register routes.
            `{% if user.is_authenticated %}
                <a class="nav-item nav-l ink" href="{% url 'login' %}">Login</a>
              {% else %}
                <a class="nav-item nav-l ink" href="{% url 'login' %}">Login</a>
                <a class="nav-item nav-link" href="{% url 'register' %}">Register</a>
              {% endif %}`

    - Profile:
        - Template:
            - Note: we don't need to pass the user variable to access the user object in our HTML file.
              We can directly use it: `{{ user.username }}`
        
        - Login required:
            - If we visit '/profile' if we are logged out, we can still access that URL.
                - We are going to use the `login_required` decorator.

                `@login_required
                 def profile(request):
                    return render(request, 'users/profile.html')`

            - We should specify the LOGIN_URL parameter in settings.py to the login page:
                - LOGIN_URL = 'login'
            
            - A nice thing about django is that it tracks the page that we made a get request without logged in,
              so when we log in, it will redirect to the page we made a get request.



Summary of Lecture 8 (User profile and Picture):
    - Profile Model:
        - We created a new Profile model to handle the profile of an user:
            - We want to have a OneToOne field because One profile is associated with One user and one User is
              associated with one profile.

            - In Imagefield, we pass the default argument so that the default image will be an avatar
              and the upload_pics means that the profile_pics will be uploaded to the profile_pics directory.

              `class Profile(models.Model):
                   user = models.OneToOneField(User, on_delete=models.CASCADE)
                   bio = models.TextField(default='Bio for user')
                   image = models.ImageField(default='default.jpg', upload_to='profile_pics')

                   def __str__(self):
                       return f'{self.user.username} Profile'`

                 - The `upload_to` field means that the images will be upload to the `profile_pics/` directory
                 - The `default` field means that the default picture will be the given one.

            - To use ImageField, we should install Pillow library.

            - Then, we applied migrations.
                - `python manage.py makemigrations`
                - `python manage.py migrate`

            - We registered our site to admin, and manually created some User profiles.

            - Note: We can chain Relationships: such as, `user.profile.image` will return the profile image.

    
    - Profile Template:
        - We created a new template for profile, we accessed the image field of the user with the {{ user.profile.image.url }}
          variable.

    - Adjustment to Settings:
        - To make the profile images work, we added a few things in the base `settings.py` file:
            - `MEDIA_ROOT = os.path.join(BASE_DIR, 'media')` for Full path to the directory that django saves images. 
                - Our images will be in media/profile_pics
            - `MEDIA_URL = '/media/'` How we are going to access the image in the browser.


        - In order to have profile, we should manually add new profile to every user, which is not convenient. We'll
          handle this in a minute.


    - Then, in our main `urls.py` file, we imported the
        * `from django.conf import settings` for accessing settings
        * `from django.conf.urls.static import static` for static files.

        Then:
            - `if settings.DEBUG:
                   urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)`
            
                - This means that if we are in development environment, upload the profile pictures to the 
                  static MEDIA_URL defined in settings.py (/media/) and the document root is MEDIA_ROOT defined in
                  `settings.py`. 

    
    - Signals:
        - Signals is something that handles User profile creation when a user is added:
            - We import:

                * `from django.db.models.signals import post_save` for Signal that is fired after an object is saved
                * `from django.contrib.auth.models import User` the Sender of the signal 
                * `from django.dispatch import receiver` Recivier -> a function that recieves the signals and performs a task
                * `from django.core.exceptions import ObjectDoesNotExist` for Error handling.
                * `from .models import Profile` Our post model.

            - Then, we create a recivier:
                `
                @receiver(post_save, sender=User)
                def create_profile(sender, instance, created, **kwargs):
                    try:
                        instance.profile.save()
                    except ObjectDoesNotExist:
                        Profile.objects.create(user=instance)   
                `

                - We define a recivier with the `@recivier(...)` decorator, and it takes the arguments SIGNAL and
                  SENDER, which is a user creation and our sender is USER model.

                - We create a normal function which takes the arguments SENDER, INSTANCE, CREATED, **KWARGS:
                    - the sender is our User,
                    - the instance is an instance of our User model, which is the User model that is currently saved
                    - Created is a boolen value for the model created. (TRUE OR FALSE)
                    - And **kwargs

                - Inside the function, we try to save the profile
                    - Here it thus means that although every Profile has a related user, not every user has a Profile.
                      It is possible that there are Users for which no Profile exists.

                      - If you thus query some_user.profile there are two scenario's that can unfold:
                            * there is a related Profile object that is the fetched, and returned; or
                            * there is no such object, and then it raises a RelatedObjectDoesNotExist error.

                      - We thus check if the instance has a `.profile` that leads to the Profile model
                        In case it is not, it will raise an exception, and create a new one.


            - When a user is saved, send a signal (post_save signal)
              The reciever wil catch the signal from the sender (User) and performs the task.
              If the user was created, create a profile object that is the instance of the User object.

        - Importing signals to `apps.py`:
            - We need to import our signal to the `apps.py` file in our users directory:
                - `class UsersConfig(AppConfig):
                    name = 'users'

                    def ready(self):
                        import users.signals

                    `

Summary of Lecture 9 (Updating User Proifle):
    - Forms:
        - We've created 2 new forms:
            - UserUpdateForm:
                - This is a form to update the user form.
                    - Fields: Username, Email
            
            - ProfileUpdateForm:
                - This is a from to update the profile image.
                    - model = Profile
                    - fields = ['image']

        - Adding forms to template:
            - We've created a `<form method="POST" enctype="multipart/form-data">` tag.
                - `<form method="POST" enctype="multipart/form-data">
                        {% csrf_token %}
                        <fieldset class="form-group">
                            <legend class="border-bottom mb-4">Profile Info</legend>
                            {{ u_form|crispy }}
                            {{ p_form|crispy }}
                        </fieldset>
                        <div class="form-group">
                            <button class="btn btn-outline-info" type="submit">Update</button>
                        </div>
                    </form>`
                
                - The `enctype='multipart/form-data' is for using forms that have an image field.
                - Then, added the usual csrf token
                - We added the 2 forms with `{{ u_form|crispy }}` and `{{ p_form|crispy }}` that
                  we passed in `views.py`. 
        
        - Form handling:
            - We add our usual `if request.method == 'POST':` statement.
                - ` if request.method == 'POST':
                        u_form = UserUpdateForm(request.POST, instance=request.user) # Creating the form with the current user's info
                        p_form = ProfileUpdateForm(
                                                    request.POST, 
                                                    request.FILES,
                                                    instance=request.user.profile
                                                ) # Creating the form with the current user's info

                        if u_form.is_valid() and p_form.is_valid():
                            u_form.save()
                            p_form.save()

                            messages.success(request, f'Your account has been updated!')
                            return redirect('profile')

                    else:
                        u_form = UserUpdateForm(instance=request.user) # Creating the form with the current user's info
                        p_form = ProfileUpdateForm(instance=request.user.profile) # Creating the form with the current user's info

                        
                    context = {
                        'u_form': u_form,
                        'p_form': p_form,
                    }`
                
                - Then, we instinciate our `UserUpdateForm` with the request.POST object, and with the
                  instance of the user. (Creating the form with the current user's info)

                - Then, we instinciate our `ProfileUpdateForm` with the request.POST object, request.FILES
                  object, and the instance=request.user.profile field. 


                 -  If we did not make a POST request, then instinciate our forms with the current
                    info of the user displayed.

                - If the u_form and p_form are valid:
                    - Save both of them.
                    - Create a flash message
                    - Then redirect to the profile page. It is important to redirect to the 
                      profile page rather than waiting for the redirection at the end of the function
                      as it will not display a confirm form resubmission alert.

                - Then, as usual, create the context dictionary.

        - `django-cleanup`:
            - django cleanup is a good package that will delete the old profile images.

            - To use it, just install it `conda install -c conda-forge django-cleanup` or 
              `pip install django-cleanup`

            - Then, add `django-cleanup` to SETTINGS.PY in INSTALLED_APPS.

        - Resizing the Image:
            - Overriding the `.save()` method for models:
                - We can easily override the `.save()` method of a model by creating
                   a new `save()` method:

                   `def save(self, *args, **kwargs):
                        super().save(*args, **kwargs)
                        ...
                    `
                    - We need to pass in the `*args, **kwargs` arguments to save.

                - We need to import the PIL library in order to perform operations on images:
                    - `from PIL import Image`
                    - ` img = Image.open(self.image.path)
                        if img.height > 300 or img.width > 300:
                            output_size = (300,300)
                            img.thumbnail(output_size)
                            img.save(self.image.path)
                        `
                    
                    - We first open the image with `Image.open` and pass the image path.
                    - Then, check if the width and the height of the image.
                    - Then, resize the image with the tuple that we passed in to the `img.thumbnail` method.
                    - Finally, save the image with the self.image.path path.

        - Adding the User Profile Image to the blog post:
            - ` <img src="{{ post.author.profile.image.url }}" alt="Profile pic" class='rounded-circle article-img'>`
                - `{{ post.author.profile.image.url }}` is saying that the URL of the image of the profile of the author of this posts will be 
                   used as the source.


Summary of Lecture 10 (CRUD):
    - Function Based Views:
        - We've been using FBV, our `urlpatterns` are directed to a certain view, which are those functions,
          and they handle the logic and returns a template page.

    - Class Based Views:
        - They have more built-in functionality.
        - There are different types of CBV:
            - List Views: Listing some database objects
            - Detail Views: the details of a e.g. youtube video detail.
            - Create Views: the creation of a e.g. youtube video creation.
            - Update Views
            - Delete Views
            - etc.
        - Many sites have general functionality.

        - Usage:
            - Import the CBV from: `from django.views.generic import ListView`.
            - Create a class that inherits from the generic view.
            -




















